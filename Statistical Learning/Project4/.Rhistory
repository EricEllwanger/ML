pop = tr %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+3428))*ave_ratings + (3428/(ratings_per_movie+3428))*4.117) %>%
arrange(desc(weighted.rating))
pop[1:10,c('Title', 'ratings_per_movie', 'ave_ratings', 'weighted.rating')]
tmpgenre[grep('Animation', tmpgenre$Genres), ][1:10,c('Title', 'ratings_per_movie', 'ave_ratings', 'weighted.rating')]
knitr::opts_chunk$set(echo = TRUE, fig.width = 8, fig.height = 5, cache = TRUE)
rm(list = ls())
WD = getwd()
setwd(WD)
# Required Packages for the assignment
req_packages = c("recommenderlab", "Matrix", "data.table", "slam",  "tidyverse")
# Find packages that needs to be installed
needs_install_packages = setdiff(req_packages, rownames(installed.packages()))
#Install packages if needed
if(length(needs_install_packages)>0) install.packages(needs_install_packages)
#Load all the required package libraries
libs_loaded = lapply(req_packages, require, character.only = TRUE)
i = paste0('u', ratings$UserID)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Year = as.numeric(unlist(lapply(movies$Title,
function(x) substr(x, nchar(x)-4, nchar(x)-1))))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
set.seed(6250)
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
#Evaluation scheme to be used for different models
e = evaluationScheme(Rmat, method='cross-validation', k=10, given=15)
#Proportion of data used for training
nrow(getData(e, "train")) / nrow(Rmat)
#Proportion of data used in the test data
nrow(getData(e, "known")) / nrow(Rmat)
#The test data has 2 equally sized matrixes - known and unknown - known has
getData(e, "known")
#And unknown has
getData(e, "unknown")
r1 = Recommender(getData(e, 'train'), 'UBCF', parameter = list(normalize='Z-score',
method='Cosine',
nn=40))
r2 = Recommender(getData(e, 'train'), 'IBCF', parameter = list(normalize='Z-score',
method='Cosine'))
r3 = Recommender(getData(e, 'train'), 'SVDF', parameter = list(normalize='Z-score'))
r4 = Recommender(getData(e, 'train'), 'POPULAR', parameter = list(normalize='Z-score'))
p1 = predict(r1, getData(e, 'known'), type='ratings')
p2 = predict(r2, getData(e, 'known'), type='ratings')
p3 = predict(r3, getData(e, 'known'), type='ratings')
p4 = predict(r4, getData(e, 'known'), type='ratings')
error = rbind(
UBCF = calcPredictionAccuracy(p1, getData(e, 'unknown')),
IBCF = calcPredictionAccuracy(p2, getData(e, 'unknown')),
SVDF = calcPredictionAccuracy(p3, getData(e, 'unknown')),
POP =  calcPredictionAccuracy(p4, getData(e, 'unknown')),
)
#Evaluation scheme to be used for different models
e = evaluationScheme(Rmat, method='cross-validation', k=10, given=15)
#Proportion of data used in the test data
nrow(getData(e, "known")) / nrow(Rmat)
#The test data has 2 equally sized matrixes - known and unknown - known has
getData(e, "known")
#And unknown has
getData(e, "unknown")
error = rbind(
UBCF = calcPredictionAccuracy(p1, getData(e, 'unknown')),
IBCF = calcPredictionAccuracy(p2, getData(e, 'unknown')),
SVDF = calcPredictionAccuracy(p3, getData(e, 'unknown')),
POP =  calcPredictionAccuracy(p4, getData(e, 'unknown'))
)
error
vector_nn = c(10,25,40,55,100)
vector_norm = c('center', 'Z-score')
models_to_evaluate <- lapply(vector_nn, function(k){
list(name = "UBCF", param = list(method = "cosine", nn = k))})names(models_to_evaluate) <- paste0("UBCF_k_", vector_nn)
models_to_evaluate <- list(
IBCF_cos = list(name = "IBCF", param = list(method = "cosine")),IBCF_cor = list(name = "IBCF", param = list(method = "pearson")),UBCF_cos = list(name = "UBCF", param = list(method = "cosine")),UBCF_cor = list(name = "UBCF", param = list(method = "pearson")),random = list(name = "RANDOM", param=NULL)
)
models_to_evaluate <- list(
IBCF_cos = list(name = "IBCF", param = list(method = "cosine")),IBCF_cor = list(name = "IBCF", param = list(method = "pearson")),UBCF_cos = list(name = "UBCF", param = list(method = "cosine")),UBCF_cor = list(name = "UBCF", param = list(method = "pearson")),random = list(name = "RANDOM", param=NULL)
)
models_to_evaluate
vector_nn = c(10,25,40,55,100)
vector_norm = c('center', 'Z-score')
models_to_evaluate <- lapply(vector_nn, function(k){
list(name = "UBCF", param = list(method = "cosine", nn = k))})
names(models_to_evaluate) <- paste0("UBCF_k_", vector_nn)
n_recommendations <- c(1, 5, seq(10, 100, 10))
list_results <- evaluate(x = eval_sets, method = models_to_evaluate, n = n_recommendations)
vector_nn = c(10,25,40,55,100)
vector_norm = c('center', 'Z-score')
models_to_evaluate <- lapply(vector_nn, function(k){
list(name = "UBCF", param = list(method = "cosine", nn = k))})
names(models_to_evaluate) <- paste0("UBCF_k_", vector_nn)
n_recommendations <- c(1, 5, seq(10, 100, 10))
list_results <- evaluate(x = e, method = models_to_evaluate, n = n_recommendations)
#no of movies which are rated but missing from movies data
ratings_not_in_movies = ratings %>%
filter(!(MovieID %in% movies$MovieID))
dim(ratings_not_in_movies)
#No of movies not rated
movies_not_rated = movies %>%
filter(!(MovieID %in% ratings$MovieID))
dim(movies_not_rated)
#no of users who have not rated any movie
users_with_no_ratings = users %>%
filter(!(UserID %in% ratings$UserID))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list = ls())
WD = getwd()
setwd(WD)
# Required Packages for the assignment
req_packages = c("recommenderlab", "Matrix", "data.table", "slam",  "tidyverse")
# Find packages that needs to be installed
needs_install_packages = setdiff(req_packages, rownames(installed.packages()))
#Install packages if needed
if(length(needs_install_packages)>0) install.packages(needs_install_packages)
#Load all the required package libraries
libs_loaded = lapply(req_packages, require, character.only = TRUE)
d = tempratings %>%
group_by(Genre) %>%
top_n(n = 5, wt = x)
#d = tempratings %>%
#  group_by(Genre) %>%
#  top_n(n = 5, wt = x)
tempratings
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Year = as.numeric(unlist(lapply(movies$Title,
function(x) substr(x, nchar(x)-4, nchar(x)-1))))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
#Load Users
users = read.csv(paste0(data_url, 'users.dat?raw=true'),
sep = ':', header = FALSE)
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Year = as.numeric(unlist(lapply(movies$Title,
function(x) substr(x, nchar(x)-4, nchar(x)-1))))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
#Load Users
#users = read.csv(paste0(data_url, 'users.dat?raw=true'),
#                 sep = ':', header = FALSE)
#users = users[, -c(2,4,6,8)] # skip columns
#colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
tempratings = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by='MovieID')
summary(tempratings$ratings_per_movie)
#d = tempratings %>%
#  group_by(Genre) %>%
#  top_n(n = 5, wt = x)
tempratings
d = tempratings %>%
group_by(Genres) %>%
top_n(n = 5, wt = x)
d = tempratings %>%
group_by(Genres) %>%
slice_max(order_by = Genres, n = 5)
d
d  = tmpratings %>%
group_by(grp) %>%
slice_max(order_by = ratings_per_movie, n = 5)
d  = tempratings %>%
group_by(grp) %>%
slice_max(order_by = ratings_per_movie, n = 5)
d  = tempratings %>%
group_by(Genres) %>%
slice_max(order_by = ratings_per_movie, n = 5)
d
d  = tempratings %>%
group_by(Genres) %>%
slice_max(order_by = ratings_per_movie, n = 50)
d
pop[1:10,c('Title', 'ratings_per_movie', 'ave_ratings', 'weighted.rating')]
#pop[1:10,c('Title', 'ratings_per_movie', 'ave_ratings', 'weighted.rating')]
d[grep('Animation', d$Genres), ][1:10,c('Title', 'ratings_per_movie', 'ave_ratings', 'weighted.rating')]
tmppop = ratings %>%
group_by(Genres) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = movies %>%
group_by(Genres) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(ratings, by = 'MovieID')
tmppop = movies[grep('Animation', tmpgenre$Genres), ]
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
tmppop
tmppop = movies[grep('Film-Noir', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
tmppop
tmppop = movies[grep('Film-Noir', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
summary(tmppop$ave_ratings)
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
summary(tmppop$ratings_per_movie)
summary(tmppop$ave_ratings)
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
tmppop = movies[grep('Animation', movies$Genres), ]
#tmppop = tmppop %>%
#        inner_join(ratings, by = 'MovieID') %>%
#        group_by(MovieID) %>%
#        summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
tmppop = movies[grep('Animation', movies$Genres), ]
#tmppop = tmppop %>%
#        inner_join(ratings, by = 'MovieID') %>%
#        group_by(MovieID) %>%
#        summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
summary(tmppop$ratings_per_movie)
summary(tmppop$ave_ratings)
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
summary(tmppop$ratings_per_movie)
summary(tmppop$ave_ratings)[4]
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
m
summary(tmppop$ave_ratings)
C = summary(tmppop$ave_ratings)[4]
C
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop = tmppop[1:50,
]
summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
summary(tmppop$ave_ratings)
C = summary(tmppop$ave_ratings)[4]
tmppop = tmppop %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+m))*ave_ratings + (m/(ratings_per_movie+m))*C) %>%
arrange(desc(weighted.rating))
tmppop = tmppop %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+m))*ave_ratings + (m/(ratings_per_movie+m))*C) %>%
arrange(desc(weighted.rating))
tmppop[1:10,]
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop = tmppop[1:50,
]
summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
group_by(Genres) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID') %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating))
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop = tmppop %>%
inner_join(ratings, by = 'MovieID')
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID') %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
tmppop = movies[grep('Animation', movies$Genres), ]
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID') %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+350))*ave_ratings + (350/(ratings_per_movie+350))*3.239) %>%
arrange(desc(weighted.rating))
#tmppop = movies[grep('Animation', movies$Genres), ]
tmppop
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
#tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = movies[grep('Animation', tmppop$Genres), ]
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ]
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ][1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ]
tmppop = tmppop %>%
arrange(desc(ratings_per_movie))
tmppop = tmppop[1:50,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ]
tmppop = tmppop %>%
arrange(desc(ratings_per_movie))
tmppop = tmppop[1:25,]
#summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ]
tmppop = tmppop %>%
arrange(desc(ratings_per_movie))
tmppop = tmppop[1:25,]
summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
summary(tmppop$ave_ratings)
C = summary(tmppop$ave_ratings)[4]
tmppop = tmppop %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+m))*ave_ratings + (m/(ratings_per_movie+m))*C) %>%
arrange(desc(weighted.rating))
tmppop[1:10,]
tmppop = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
tmppop = tmppop[grep('Animation', tmppop$Genres), ]
tmppop = tmppop %>%
arrange(desc(ratings_per_movie))
tmppop = tmppop[1:25,]
summary(tmppop$ratings_per_movie)
m = summary(tmppop$ratings_per_movie)[6]
tmppop
summary(tmppop$ave_ratings)
C = summary(tmppop$ave_ratings)[4]
tmppop = tmppop %>%
mutate(weighted.rating = (ratings_per_movie/(ratings_per_movie+m))*ave_ratings + (m/(ratings_per_movie+m))*C) %>%
arrange(desc(weighted.rating))
tmppop[1:10,]
runApp()
tmpgenre[grep('Animation', tmpgenre$Genres), ][1:10,]
